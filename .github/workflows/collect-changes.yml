name: Analyze Unreleased Changes

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read

jobs:
  analyze:
    name: Analyze Unreleased Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Analyze unreleased commits
        run: |
          # Install conventional-recommended-bump
          npm install -g conventional-recommended-bump conventional-changelog-conventionalcommits

          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "üìä No previous releases found - all commits are unreleased"
            RANGE="HEAD"
            CURRENT_VERSION="0.0.0"
          else
            echo "üìä Analyzing changes since $LAST_TAG"
            RANGE="$LAST_TAG..HEAD"
            CURRENT_VERSION="${LAST_TAG#v}"
          fi

          # Count commits by type
          FEATURES=$(git log $RANGE --pretty=format:"%s" --no-merges | grep -c "^feat" || true)
          FIXES=$(git log $RANGE --pretty=format:"%s" --no-merges | grep -c "^fix" || true)
          BREAKING=$(git log $RANGE --pretty=format:"%B" --no-merges | grep -c "BREAKING CHANGE" || true)
          TOTAL=$(git log $RANGE --oneline --no-merges | wc -l | tr -d ' ')

          if [ "$TOTAL" -eq 0 ]; then
            echo "‚úÖ No unreleased changes"
            exit 0
          fi

          echo ""
          echo "üìù Unreleased Changes Summary"
          echo "=============================="
          echo ""
          echo "Current version: v$CURRENT_VERSION"
          echo "Commits since last release: $TOTAL"
          echo ""
          echo "By type:"
          echo "  ‚ú® Features: $FEATURES"
          echo "  üêõ Bug fixes: $FIXES"
          echo "  üí• Breaking changes: $BREAKING"
          echo ""

          # Calculate next version
          BUMP_TYPE=$(conventional-recommended-bump -p conventionalcommits)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"

          case $BUMP_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch|*)
              patch=$((patch + 1))
              ;;
          esac

          NEXT_VERSION="$major.$minor.$patch"
          echo "üéØ Next version will be: v$NEXT_VERSION (${BUMP_TYPE} bump)"
          echo ""

          echo "üìã Commit List:"
          echo "==============="
          git log $RANGE --pretty=format:"  - %s (%h)" --no-merges

          echo ""
          echo ""
          echo "üöÄ To create a release, go to:"
          echo "   Actions ‚Üí Create Release ‚Üí Run workflow"