name: Publish Release

on:
  workflow_dispatch:
    inputs:
      release_id:
        description: 'Release ID to publish (leave empty to publish latest draft)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  publish:
    name: Publish Release with Version Bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.17.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Get draft release to publish
        id: get_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${{ github.event.inputs.release_id }}" ]; then
            RELEASE_ID="${{ github.event.inputs.release_id }}"
          else
            # Get the latest draft release
            RELEASE_ID=$(gh api \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/releases \
              --jq '.[] | select(.draft == true) | .id' \
              | head -n 1)
          fi

          if [ -z "$RELEASE_ID" ]; then
            echo "❌ No draft releases found"
            exit 1
          fi

          # Get release details
          RELEASE_INFO=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/$RELEASE_ID)

          TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          RELEASE_NOTES=$(echo "$RELEASE_INFO" | jq -r '.body')

          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Publishing release: $TAG_NAME"

          # Save release notes for changelog
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Checkout tag
        run: |
          # Fetch and checkout the tag that semantic-release created
          git fetch --tags
          git checkout tags/${{ steps.get_release.outputs.tag_name }} -b temp-release-branch

      - name: Update package.json version
        run: |
          VERSION="${{ steps.get_release.outputs.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          npm version $VERSION --no-git-tag-version --allow-same-version
          echo "Updated package.json to version $VERSION"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ steps.get_release.outputs.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          {
            echo "# $VERSION ($DATE)"
            echo ""
            cat release_notes.md
            echo ""
            echo ""
          } > new_entry.md

          # Append existing changelog if it exists
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> new_entry.md
          fi

          mv new_entry.md CHANGELOG.md

          # Format files
          pnpm prettier --write package.json CHANGELOG.md

      - name: Commit changes to main
        env:
          HUSKY: 0
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Add and commit changes
          git add package.json CHANGELOG.md
          git commit -m "chore(release): ${{ steps.get_release.outputs.tag_name }} [skip ci]

          - Update package.json version
          - Update CHANGELOG.md" || echo "No changes to commit"

          # Push to main branch
          git push origin HEAD:main

      - name: Publish the release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/${{ steps.get_release.outputs.release_id }} \
            -f draft=false

          echo "✅ Published release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.get_release.outputs.tag_name }}"