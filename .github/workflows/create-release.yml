name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version (leave empty for auto-calculation)'
        required: false
        type: string
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Calculate version
        id: version
        run: |
          # Install conventional-recommended-bump and conventional-changelog-cli
          npm install -g conventional-recommended-bump conventional-changelog-cli conventional-changelog-conventionalcommits

          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if there's a version override
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            NEXT_VERSION="${{ github.event.inputs.version_override }}"
            echo "Using override version: $NEXT_VERSION"
          else
            # Get the last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Last tag: $LAST_TAG"

            # Calculate recommended bump based on commits since last tag
            if [ "$LAST_TAG" = "v0.0.0" ]; then
              COMMITS_RANGE="HEAD"
            else
              COMMITS_RANGE="$LAST_TAG..HEAD"
            fi

            # Analyze commits to determine bump type
            BUMP_TYPE=$(conventional-recommended-bump -p conventionalcommits)
            echo "Recommended bump: $BUMP_TYPE"

            # Parse current version
            IFS='.' read -r major minor patch <<< "${LAST_TAG#v}"

            # Apply bump
            case $BUMP_TYPE in
              major)
                major=$((major + 1))
                minor=0
                patch=0
                ;;
              minor)
                minor=$((minor + 1))
                patch=0
                ;;
              patch|*)
                patch=$((patch + 1))
                ;;
            esac

            NEXT_VERSION="$major.$minor.$patch"
          fi

          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Generate changelog for this release
          if [ -z "$LAST_TAG" ]; then
            echo "Generating changelog for all commits"
            conventional-changelog -p conventionalcommits -r 0 > RELEASE_NOTES.md
          else
            echo "Generating changelog since $LAST_TAG"
            conventional-changelog -p conventionalcommits -r 2 | tail -n +2 > RELEASE_NOTES.md
          fi

          # Clean up the release notes (remove version headers)
          sed -i.bak '/^#/d' RELEASE_NOTES.md && rm RELEASE_NOTES.md.bak

          echo "Release notes:"
          cat RELEASE_NOTES.md

      - name: Update package.json
        run: |
          npm version ${{ steps.version.outputs.next_version }} --no-git-tag-version
          echo "Updated package.json to version ${{ steps.version.outputs.next_version }}"

      - name: Update CHANGELOG.md
        run: |
          VERSION="${{ steps.version.outputs.next_version }}"
          DATE=$(date +%Y-%m-%d)

          # Create new changelog entry
          {
            echo "# $VERSION ($DATE)"
            echo ""
            cat RELEASE_NOTES.md
            echo ""
            echo ""
          } > new_changelog.md

          # Append existing changelog if it exists
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> new_changelog.md
          fi

          mv new_changelog.md CHANGELOG.md

      - name: Format files
        run: |
          npx prettier --write package.json CHANGELOG.md || echo "Prettier not configured, skipping format"

      - name: Commit changes
        env:
          HUSKY: 0
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add package.json CHANGELOG.md
          git commit -m "chore(release): v${{ steps.version.outputs.next_version }} [skip ci]" || echo "No changes to commit"

      - name: Create tag
        run: |
          git tag "v${{ steps.version.outputs.next_version }}"

      - name: Push changes
        run: |
          git push origin main
          git push origin "v${{ steps.version.outputs.next_version }}"

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FLAGS=""
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            FLAGS="--prerelease"
          fi

          gh release create "v${{ steps.version.outputs.next_version }}" \
            --title "Release v${{ steps.version.outputs.next_version }}" \
            --notes-file RELEASE_NOTES.md \
            $FLAGS

          echo "âœ… Created release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.next_version }}"